<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN" monitorInterval="300">
    <Appenders>
        <!-- standard output -->
        <Console name="stdout" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{[%-5level]} [%20.30t] %20.36c -> %msg%n"/>
        </Console>
        <!-- logger debug level message -->
        <RollingFile name="RollingFile_debug" fileName="logs/debug.log" filePattern="logs/$${date:yyyy-MM-dd}/debug.%i.log.zip">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%t] %logger{36} -> %msg%n" />
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <CronTriggeringPolicy schedule="0 0 0 1/1 * ?" evaluateOnStartup="true" />
                <SizeBasedTriggeringPolicy size="10MB" />
            </Policies>
        </RollingFile>
        <!-- logger error level message -->
        <RollingFile name="RollingFile_error" fileName="logs/error.log" filePattern="logs/$${date:yyyy-MM-dd}/error.%i.log.zip">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%t] %l -> %msg%n" />
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <CronTriggeringPolicy schedule="0 0 0 1/1 * ?" evaluateOnStartup="true" />
                <SizeBasedTriggeringPolicy size="10MB" />
            </Policies>
        </RollingFile>
    </Appenders>
    <Loggers>
        <Root level="debug">
            <AppenderRef ref="stdout"/>
            <AppenderRef ref="RollingFile_debug"/>
            <AppenderRef ref="RollingFile_error"/>
        </Root>

        <Logger name="log4j.logger.org.apache.axis" level="debug" />
        <Logger name="com.hzy.modules.log.LogDemo" level="trace" />
        <Logger name="org.springframework.web" level="debug" />
    </Loggers>
</Configuration>


<!--
    日志记录级别 TRACE, DEBUG, INFO, WARN, ERROR, FATAL
    monitorInterval -> 自动重新配置 单位:秒
    additivity -> 记录传递到父级

    RollingFileAppender
        filepattern:存档日志文件的文件名模式。模式的格式取决于使用的RolloverPolicy。
                    DefaultRolloverPolicy将同时接受与SimpleDateFormat兼容的日期/时间模式
                    和/或表示整数计数器的％i。该模式还支持在运行时进行插值，因此任何查找（例如DateLookup）都可以包含在模式中。

    polices:
        CompositeTriggeringPolicy:
            <Policies>
              <OnStartupTriggeringPolicy minSize="lang" />
              <SizeBasedTriggeringPolicy size="20 MB" />
              <TimeBasedTriggeringPolicy interval="int" modulate="boolean" maxRandomDelay="int"/>
            </Policies>
            <CronTriggeringPolicy schedule="corn exp" evaluateOnStartup="true|false">



         ConversionPattern 日志信息，符号所代表的含义：
         -X号: X信息输出时左对齐；
         %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
         %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
         %r: 输出自应用启动到输出该log信息耗费的毫秒数
         %c: 输出日志信息所属的类目，通常就是所在类的全名
         %t: 输出产生该日志事件的线程名
         %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
         %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
         %%: 输出一个"%"字符
         %F: 输出日志消息产生时所在的文件名称
         %L: 输出代码中的行号
         %m: 输出代码中指定的消息,产生的日志具体信息
         %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
         可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
                 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
                 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
                 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
                 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
    -->